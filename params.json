{
  "name": "UpperCase",
  "tagline": "A toy programming language made entirely of upper-case letters and nothing else. No whitespace. No punctuation. No special characters. Just upper-case letters.",
  "body": "# UpperCase\r\n\r\nA toy programming language made entirely of upper-case letters and nothing else. No whitespace. No punctuation. No special characters. No comments. Just upper-case letters.\r\n\r\nHere's an example of code in UpperCase that prints \"Hello World\" to the console:\r\n\r\n\tDSLUHLLELLLLLLLLOWSLUWLLOLLRLLLLLDESP\r\n\r\nYes, it's that bad.\r\n\r\n----------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n## Table of Contents\r\n\r\n* [Syntax](## Syntax)\r\n\t* [Hello World Code](### Hello World Code)\r\n\t* [Defining Data](### Defining Data)\r\n\t\t* [Booleans](#### Booleans)\r\n\t\t* [Characters](#### Characters)\r\n\t\t* [Strings](#### Strings)\r\n\t\t* [Integers](#### Integers)\r\n\t\t* [Floats](#### Floats)\r\n\t* [System Operations](### System Operations)\r\n\t\t* [Stack Operations](#### Stack Operations)\r\n\t\t* [Vartable Operations](#### Vartable Operations)\r\n\t* [Math Operations](### Math Operations)\r\n\r\n## Syntax\r\n\r\nUpperCase uses a tree of commands, each command is mapped to a particular sequence of characters. UpperCase starts at the top, or \"main\" state. Sequences of letters advance down the tree and execute commands according to the tree.\r\n\r\n### Hello World Code\r\n\r\nLet's break down the Hello World code. The first segment `DSLUHLLELLLLLLLLOWSLUWLLOLLRLLLLLDE` defines the string \"Hello World\" and puts it on the stack. The first letter `D` indicates that a data value is being stored. The next letter `S` indicates that the type of the data is a string. After that is a set of letter sequences indicating the characters in the string as follows:\r\n\r\n| Sequence | Character |\r\n|----------|-----------|\r\n|  `LUH`   |    \"H\"    |\r\n|  `LLE`   |    \"e\"    |\r\n|  `LLL`   |    \"l\"    |\r\n|  `LLL`   |    \"l\"    |\r\n|  `LLO`   |    \"o\"    |\r\n|  `WS`    |    \" \"    |\r\n|  `LUW`   |    \"W\"    |\r\n|  `LLO`   |    \"o\"    |\r\n|  `LLR`   |    \"r\"    |\r\n|  `LLL`   |    \"l\"    |\r\n|  `LLD`   |    \"d\"    |\r\n\r\nThe string is then terminated by the letter `E`. The following segment `SP` prints the last value on the stack (the \"Hello World\" string), to the console.\r\n\r\nThe program ends at the end of the character stream.\r\n\r\n### Defining Data\r\n\r\nThe Data module is accesed by the letter `D`. This initializes a data definition. Data values are stored onto a stack, where they are available to other operations.\r\n\r\n#### Booleans\r\n\r\nThe character `B` initiates a boolean. The letter `T` sets the boolean to true, and the letter `F` sets the boolean to false. The sequence `DBT` is an example of a boolean with the value of true.\r\n\r\n#### Characters\r\n\r\nThe character `C` initiates a single character. The sequence after specifies the character.\r\n\r\nLetter characters begin with `L`. `L` is then followed by `U` or `L` depending on if the letter is uppercase or lowercase. Finally the letter itself (in uppercase) defines the letter being used. For example, the sequence `DCLUH` is the capital letter \"H\" and the sequence `DCLLO` is the lowercase letter \"o\".\r\n\r\nWhitespace characters begin with `W`. After `W`, characters are defined as follows:\r\n\r\n| Letter |   Character   |\r\n|--------|---------------|\r\n|   S    |      ` `      |\r\n|   N    |     `\\\\n`     |\r\n\r\nPunctuation characters begin with `P`. After `P`, characters are defined as follows:\r\n\r\n| Letter |   Character   |\r\n|--------|---------------|\r\n|   C    |      `,`      |\r\n|   P    |      `.`      |\r\n|   Q    |      `?`      |\r\n|   E    |      `!`      |\r\n|   A    |      `'`      |\r\n\r\n#### Strings\r\n\r\nThe character `S` initiates a string. Within the string definition, a series of character sequences define the characters in the string. Finally, the string definition is terminated by the letter `E`.\r\n\r\nFor example, the sequence `DSLUHLLELLLLLLLLOE` defines the string \"Hello\".\r\n\r\n#### Integers\r\n\r\nThe character `I` initiates an integer. Within the integer definition, the digits of the integer are defined by letters as follows:\r\n\r\n| Letter |     Digit     |\r\n|--------|---------------|\r\n|   A    |      `0`      |\r\n|   B    |      `1`      |\r\n|   C    |      `2`      |\r\n|   D    |      `3`      |\r\n|   F    |      `4`      |\r\n|   G    |      `5`      |\r\n|   H    |      `6`      |\r\n|   I    |      `7`      |\r\n|   J    |      `8`      |\r\n|   K    |      `9`      |\r\n\r\nThe letter `E` terminates the integer.\r\n\r\nFor example, the sequence `DIHCE` defines the integer 52.\r\n\r\n#### Floats\r\n\r\nThe character `F` initiates a float. Within the float definition, the same letters that define the digits of an integer also define a float, with the addition of the letter `P` that defines the decimal point. Floats are also terminated by `E`.\r\n\r\nFor example, the sequence `DFJPDE` defines the float 8.3.\r\n\r\n### System Operations\r\n\r\nThe character `S` initiates a system operation. Within a system operation definition, the character `P` prints the last data value on the stack, and the character `I` prints a detailed representation of the last value on the stack, indicating the type of the data.\r\n\r\n#### Stack Operations\r\n\r\nThe character `S` within a system operation initiates a stack operation. Within a stack operation definition, the character `I` prints a detailed representation of the entire stack, indicating all the values on the stack in order. The character `C` clears the entire stack.\r\n\r\n#### Variable Operations\r\n\r\nThe character `V` within a system operation initiates a variable operation. Within a variable operation, the character `C` clears the vartable, the character `S` sets the last value on the stack to the address represented by the next letter, and the character `G` pushes the value at the address represented by the next letter.\r\n\r\nFor example, the sequence `SVGA` pushes the value at the address `A` to the stack.\r\n\r\n### Math Operations\r\n\r\nThe character `M` initiates a math operation. This will pop the last two values on the stack, perform an operation on them, and push the result back onto the stack. The operactions that can be done are represented as follows:\r\n\r\n| Letter |    Operation   |                      Types                        |\r\n|--------|----------------|---------------------------------------------------|\r\n|  `A`   |   addition     | integers, floats, characters\\*, booleans, strings | \r\n|  `S`   |  subtraction   |      integers, floats, characters, booleans       |\r\n|  `T`   | multiplication |      integers, floats, characters, booleans       |\r\n|  `D`   |    division    |      integers, floats, characters, booleans       |\r\n|  `M`   |    modulus     |          integers, characters, booleans           |\r\n\r\n\\*Character addition concatenates the two characters into a string\r\n\r\n----------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\nAnshul Kharbanda",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}